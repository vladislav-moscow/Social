import { create } from 'zustand';
import { devtools } from 'zustand/middleware';
import axios from 'axios';

/**
 * Zustand store для управления состоянием пользователей.
 * Включает действия для получения данных пользователей и их сохранения.
 */
/**
 * Zustand store для управления состоянием пользователей.
 * Включает действия для получения данных пользователей и их сохранения.
 */
const useUserStore = create(
	devtools((set, get) => ({
		// Начальное состояние стора
		users: {}, // Хранение данных пользователей, организованных по их ID.
		isFetching: false, // Флаг загрузки данных, чтобы отслеживать состояние загрузки.
		error: false, // Флаг ошибки, чтобы отслеживать состояние ошибок.

		/**
		 * Асинхронная функция для получения данных пользователя.
		 * @param {string} userId - ID пользователя.
		 * Проверяет, загружен ли пользователь уже в состояние; если да, ничего не делает.
		 * Если нет, выполняет запрос к серверу для получения данных пользователя и сохраняет их в состоянии.
		 */
		fetchUser: async (userId) => {
			const existingUser = get().users[userId]; // Проверяем, есть ли уже данные о пользователе в состоянии.

			// Если пользователь уже загружен, ничего не делаем
			if (existingUser) {
				return; // Выход из функции, если пользователь уже загружен.
			}

			set({ isFetching: true, error: false }); // Устанавливаем состояние загрузки перед выполнением запроса.

			try {
				// Выполняем запрос к серверу для получения данных пользователя по его ID.
				const res = await axios.get(`/api/users?userId=${userId}`);
				// Обновляем состояние, добавляя полученные данные пользователя.
				set((state) => ({
					users: { ...state.users, [userId]: res.data }, // Добавляем данные нового пользователя в объект users.
					isFetching: false, // Сбрасываем флаг загрузки после успешного получения данных.
					error: false, // Сбрасываем состояние ошибки.
				}));
			} catch (err) {
				// В случае ошибки, сохраняем сообщение об ошибке в состояние.
				set({
					isFetching: false, // Сбрасываем флаг загрузки.
					error: err.response?.data?.message || 'Ошибка загрузки пользователя', // Обработка ошибок от сервера или использование стандартного сообщения.
				});
			}
		},

		/**
		 * Метод для получения пользователя из состояния по его ID.
		 * @param {string} userId - ID пользователя.
		 * @returns {Object|null} - Данные пользователя или null, если пользователь не найден в состоянии.
		 */
		getUserById: (userId) => get().users[userId], // Возвращаем данные пользователя, если они уже есть в состоянии.

		/**
		 * Очистка всех данных пользователей.
		 * Удаляет всех пользователей из состояния, сбрасывая состояние users.
		 */
		clearUsers: () => set({ users: {} }), // Полностью очищаем объект users, удаляя всех пользователей.
	}))
);

export default useUserStore;
